{
    "/RL/ray_learn.py": "Ray Reinforcement Learning Training",
    "/RL/ray_learn.py:1-33": "Custom Logger and PPO Setup",
    "/RL/ray_learn.py:103-127": "Policy Evaluation via Loop in RL Ray Learn",
    "/RL/ray_learn.py:128-147": "Saving Environment States and Tracking Performance",
    "/RL/ray_learn.py:149-179": "Ray Environment Renderer",
    "/RL/ray_learn.py:180-208": "Building Robotic Environment with Ray Learn",
    "/RL/ray_learn.py:209-228": "Training Policy and Evaluating Paths in RL Environment",
    "/RL/ray_learn.py:34-58": "SAC Configuration Builder",
    "/RL/ray_learn.py:59-80": "Restore or Load Agent for Ray Environment",
    "/RL/ray_learn.py:81-102": "Reinforcement Learning Policy Training & Saving",
    "/cem_policy/parallel_worker.py": "Parallel Cost Calculation with Multiprocessing",
    "/cem_policy/parallel_worker.py:1-33": "Parallel Cost Calculator",
    "/cem_policy/parallel_worker.py:34-55": "Parallel Rollout Class",
    "/cem_policy/parallel_worker.py:56-83": "Parallel Rollout Worker Initialization",
    "/cem_policy/utils.py": "Save Numpy as GIF with Moviepy",
    "/cem_policy/utils.py:1-34": "Save Numpy as GIF with Moviepy",
    "/cem_policy/utils.py:111-116": "State-based Environment Parameter Setting",
    "/cem_policy/utils.py:36-58": "Environment to Moviepy Clip Function",
    "/cem_policy/utils.py:59-82": "Retrieve State Dictionary from Environment",
    "/cem_policy/utils.py:83-110": "Pickle-based Environment State Saving and Loading",
    "/environment.yaml": "Python Dependencies for RoboGen Environment",
    "/environment.yaml:1-39": "RoboGen Environment Specification",
    "/environment.yaml:108-148": "Environment Requirements: RoboGen",
    "/environment.yaml:149-188": "Dependencies List for Python Project",
    "/environment.yaml:189-230": "Software Dependencies Listing",
    "/environment.yaml:231-267": "YAML Python Packages List",
    "/environment.yaml:268-308": "Package Imports for RoboGen Environment",
    "/environment.yaml:309-348": "Python Packages for RoboGen Project",
    "/environment.yaml:349-388": "Python Libraries List",
    "/environment.yaml:389-430": "Libraries and Dependencies for Software Project",
    "/environment.yaml:40-74": "Environment Configuration Libraries List",
    "/environment.yaml:431-442": "Dependencies Listing in RoboGen Environment",
    "/environment.yaml:75-107": "RoboGen Environment Packages List",
    "/execute.py": "Prepare and Execute RoboGen Environment",
    "/execute.py:1-34": "Execute and Test Environment",
    "/execute.py:107-140": "Initialize and Execute RoboGen Task",
    "/execute.py:141-165": "Directory and File Management for Experiment",
    "/execute.py:165-184": "Substep Iterator and Pruning Code",
    "/execute.py:185-201": "Checks and Executes Existing GIF",
    "/execute.py:202-220": "Skip and Resume RL Model Training",
    "/execute.py:221-232": "Object Initialization with Specific Parameters and Arguments",
    "/execute.py:233-255": "Time-Stamped GIF Python Script",
    "/execute.py:256-265": "Command-Line Arguments in Python with argparse",
    "/execute.py:266-283": "Command-Line Arguments Control Execution",
    "/execute.py:284-288": "Initializing RoboGen Instance",
    "/execute.py:34-61": "Environment Setup and Path Determination",
    "/execute.py:62-88": "Capture Images Around Objects",
    "/execute.py:89-106": "Advanced AI Training Functionality",
    "/execute_locomotion.py": "Optimizing Cost Functions with CEM Algorithm",
    "/execute_locomotion.py:1-25": "CEM Optimizer Class for Multi-Dimensional Cost Function",
    "/execute_locomotion.py:110-133": "Assistive Gym Environment RL Algorithm",
    "/execute_locomotion.py:135-166": "Loading and Setting Up Robot Tasks",
    "/execute_locomotion.py:168-199": "Locomotion Policy Execution and Saving",
    "/execute_locomotion.py:200-203": "Save GIF and Pickle States",
    "/execute_locomotion.py:26-44": "Genetic Algorithm for Locomotion Optimization",
    "/execute_locomotion.py:45-64": "CEM-based Candidate Distribution Initialization",
    "/execute_locomotion.py:65-87": "Mean and Variance Calculation for Elites",
    "/execute_locomotion.py:88-109": "Optimizing Locomotion Actions via Genetic Algorithm",
    "/execute_long_horizon.py": "Long-Horizon Executor",
    "/execute_long_horizon.py:1-23": "Complex Task Executor Function",
    "/execute_long_horizon.py:100-115": "GIF Checker and Learning Reward",
    "/execute_long_horizon.py:116-136": "Multi-Trial Subprocess Learning",
    "/execute_long_horizon.py:137-152": "Highest Return Retriever",
    "/execute_long_horizon.py:153-170": "Saving Simulation Output: Text and GIF Formats",
    "/execute_long_horizon.py:171-183": "Customizing Training Arguments",
    "/execute_long_horizon.py:184-197": "Customizable Long-Horizon Task Executor",
    "/execute_long_horizon.py:24-57": "Experiment Initialization Code",
    "/execute_long_horizon.py:58-80": "JSON File Meta Writer",
    "/execute_long_horizon.py:81-99": "Long-Horizon Task Substep Execution",
    "/gpt_4/adjust_size.py": "Adjust Size: Extract & Scale YAML Objects",
    "/gpt_4/adjust_size.py:1-25": "Adjust Size V2: Parse 3D Object Data from YAML",
    "/gpt_4/adjust_size.py:27-46": "Create New User Content and Append to List",
    "/gpt_4/adjust_size.py:48-72": "Adjust Mesh/URDF Sizes from YAML Data",
    "/gpt_4/bard_verify.py": "Bard Image Verification with GPT",
    "/gpt_4/bard_verify.py:1-27": "Bard Verification API Setup",
    "/gpt_4/bard_verify.py:104-121": "GPT Verification Checker",
    "/gpt_4/bard_verify.py:28-55": "Bard, Blip2, Objaverse Verification",
    "/gpt_4/bard_verify.py:56-87": "BARD & BLIP-2 Image Validation",
    "/gpt_4/bard_verify.py:88-103": "Robot Query String Construction",
    "/gpt_4/prompts/prompt_distractor.py": "Distractor Configuration Appending",
    "/gpt_4/prompts/prompt_distractor.py:1-20": "Robotic Arm Task Configuration",
    "/gpt_4/prompts/prompt_distractor.py:108-142": "Task Copier: Customizing Configurations with Descriptions",
    "/gpt_4/prompts/prompt_distractor.py:143-160": "GPT-4 Distractor Generator",
    "/gpt_4/prompts/prompt_distractor.py:162-179": "Sapian Object Retrieval Post-Processing",
    "/gpt_4/prompts/prompt_distractor.py:181-187": "Append Dictionary and Write Configs",
    "/gpt_4/prompts/prompt_distractor.py:21-28": "Object Fields for Simulator or Search",
    "/gpt_4/prompts/prompt_distractor.py:28-38": "Collision-Free Object Placement",
    "/gpt_4/prompts/prompt_distractor.py:38-74": "New Objects on the Table",
    "/gpt_4/prompts/prompt_distractor.py:75-107": "AI Distractor Object Creation",
    "/gpt_4/prompts/prompt_from_description.py": "Robotic Arm Control and Configuration",
    "/gpt_4/prompts/prompt_from_description.py:1-13": "Robot Arm Task Descriptions Import",
    "/gpt_4/prompts/prompt_from_description.py:100-132": "Robotic Arm Moves Object",
    "/gpt_4/prompts/prompt_from_description.py:133-155": "Task Response Parser",
    "/gpt_4/prompts/prompt_from_description.py:14-44": "Articulation Tree for Task Completion",
    "/gpt_4/prompts/prompt_from_description.py:156-177": "Extract Joints from Task Description",
    "/gpt_4/prompts/prompt_from_description.py:178-203": "Generate Task User Content",
    "/gpt_4/prompts/prompt_from_description.py:205-220": "Generate Config Path from Task Description",
    "/gpt_4/prompts/prompt_from_description.py:221-247": "Object Configuration Generator",
    "/gpt_4/prompts/prompt_from_description.py:248-248": "Generate Distractor with Customizable Settings",
    "/gpt_4/prompts/prompt_from_description.py:45-67": "Robot Arm Oven Manipulation",
    "/gpt_4/prompts/prompt_from_description.py:69-99": "Safe Retrieval Robot Arm Task",
    "/gpt_4/prompts/prompt_locomotion.py": "GPT-4 Locomotion Task Generator",
    "/gpt_4/prompts/prompt_locomotion.py:1-22": "Locomotion Task Prompts for Reinforcement Learning",
    "/gpt_4/prompts/prompt_locomotion.py:102-124": "Walking Skill Reward Calculation",
    "/gpt_4/prompts/prompt_locomotion.py:125-134": "COM-Based Robot Orientation and Locomotion Initialization",
    "/gpt_4/prompts/prompt_locomotion.py:135-147": "Robot Locomotion Control with Stability Terms",
    "/gpt_4/prompts/prompt_locomotion.py:148-181": "Robot Movement Reward Calculator",
    "/gpt_4/prompts/prompt_locomotion.py:182-222": "GPT Model for Locomotion Task Generation",
    "/gpt_4/prompts/prompt_locomotion.py:223-246": "Task Parser and Reward Extractor",
    "/gpt_4/prompts/prompt_locomotion.py:23-46": "Quadruped Locomotion Reward Calculation",
    "/gpt_4/prompts/prompt_locomotion.py:248-274": "Automated Task Rewards and Formatting",
    "/gpt_4/prompts/prompt_locomotion.py:275-286": "YAML Task Config Writer",
    "/gpt_4/prompts/prompt_locomotion.py:48-76": "Skill Evaluation via Robotics Metrics",
    "/gpt_4/prompts/prompt_locomotion.py:77-101": "Robot Jumping Control Algorithm",
    "/gpt_4/prompts/prompt_manipulation.py": "Automating Household Tasks with Franka Panda Arm",
    "/gpt_4/prompts/prompt_manipulation.py:1-16": "Robotic Arm Manipulation Tasks",
    "/gpt_4/prompts/prompt_manipulation.py:115-139": "Populate Task Description with Object Data",
    "/gpt_4/prompts/prompt_manipulation.py:141-165": "GPT-4 Task Response Generator",
    "/gpt_4/prompts/prompt_manipulation.py:166-184": "Task Extractor and Configurator",
    "/gpt_4/prompts/prompt_manipulation.py:17-48": "Task Structure Definition in Code",
    "/gpt_4/prompts/prompt_manipulation.py:49-78": "Robotic Arm Joint and Link Properties",
    "/gpt_4/prompts/prompt_manipulation.py:79-94": "Robot Oven Burger Heating Task",
    "/gpt_4/prompts/prompt_manipulation.py:94-113": "Generate Robot Manipulation Tasks from Articulation Trees",
    "/gpt_4/prompts/prompt_manipulation_reward_primitive.py": "Robotic Task Rewards and Primitive Grasping",
    "/gpt_4/prompts/prompt_manipulation_reward_primitive.py:1-19": "Robotic Arm Task Decomposition",
    "/gpt_4/prompts/prompt_manipulation_reward_primitive.py:115-154": "Robotic Arm Temperature Reward Calculation",
    "/gpt_4/prompts/prompt_manipulation_reward_primitive.py:155-189": "Reaching for Refrigerator Items with Robot Grasps and Rewards",
    "/gpt_4/prompts/prompt_manipulation_reward_primitive.py:190-210": "Door Opening Reward Calculation",
    "/gpt_4/prompts/prompt_manipulation_reward_primitive.py:20-44": "Oven Object Properties and Reward Primitive",
    "/gpt_4/prompts/prompt_manipulation_reward_primitive.py:212-234": "Robotics Task: Refrigerator Item Manipulation with Rewards",
    "/gpt_4/prompts/prompt_manipulation_reward_primitive.py:235-263": "Target Location Reward Calculation",
    "/gpt_4/prompts/prompt_manipulation_reward_primitive.py:264-294": "Robotic Arm Door Closing Reward Calculation",
    "/gpt_4/prompts/prompt_manipulation_reward_primitive.py:295-334": "Articulated Box with Hinge and Lids",
    "/gpt_4/prompts/prompt_manipulation_reward_primitive.py:335-356": "Box Lid Grasping and Opening with Reward-based Primitive Tasks",
    "/gpt_4/prompts/prompt_manipulation_reward_primitive.py:356-386": "Lid Opening Reward Calculation",
    "/gpt_4/prompts/prompt_manipulation_reward_primitive.py:387-416": "Robot Task Reward Calculation",
    "/gpt_4/prompts/prompt_manipulation_reward_primitive.py:417-439": "Combining Rewards for Car Detection",
    "/gpt_4/prompts/prompt_manipulation_reward_primitive.py:440-450": "Object Manipulation Primitives",
    "/gpt_4/prompts/prompt_manipulation_reward_primitive.py:45-66": "Robot Controls Oven Temperature through Knob Manipulation",
    "/gpt_4/prompts/prompt_manipulation_reward_primitive.py:451-458": "Object Manipulation Methods",
    "/gpt_4/prompts/prompt_manipulation_reward_primitive.py:458-489": "Primitive Action Spaces for Robotics Learning",
    "/gpt_4/prompts/prompt_manipulation_reward_primitive.py:490-535": "Generate Reward/Primitive Environment for Robotics Task",
    "/gpt_4/prompts/prompt_manipulation_reward_primitive.py:536-574": "GPT-Based Task Manipulation and Reward Primitives",
    "/gpt_4/prompts/prompt_manipulation_reward_primitive.py:575-598": "Sub-step Identification from Prompts",
    "/gpt_4/prompts/prompt_manipulation_reward_primitive.py:599-618": "Reward or Primitive Formatting",
    "/gpt_4/prompts/prompt_manipulation_reward_primitive.py:619-639": "Reward/Primitive File Generation\nTitle within 3 to 7 words:\nRewards Primitive File Generation",
    "/gpt_4/prompts/prompt_manipulation_reward_primitive.py:640-648": "Primitive or Reward: File Content Constructer",
    "/gpt_4/prompts/prompt_manipulation_reward_primitive.py:67-74": "Robot Manipulation: Reward Primitives and Action Spaces",
    "/gpt_4/prompts/prompt_manipulation_reward_primitive.py:74-85": "Designing Rewards with Python for Manipulation Tasks",
    "/gpt_4/prompts/prompt_manipulation_reward_primitive.py:85-92": "Object Manipulation Utilities",
    "/gpt_4/prompts/prompt_manipulation_reward_primitive.py:94-115": "Oven Temperature Control Primitives",
    "/gpt_4/prompts/prompt_set_joint_angle.py": "Prompt: Set Joint Angles with GPT-4",
    "/gpt_4/prompts/prompt_set_joint_angle.py:1-12": "Set Joint Angles for Articulated Objects",
    "/gpt_4/prompts/prompt_set_joint_angle.py:117-150": "Set Joint Angle for Articulated Object Lighting",
    "/gpt_4/prompts/prompt_set_joint_angle.py:12-43": "Articulated Object Joints Definition",
    "/gpt_4/prompts/prompt_set_joint_angle.py:151-181": "Robotic Lamp Control Code",
    "/gpt_4/prompts/prompt_set_joint_angle.py:181-221": "Generate Prompt for GPT-4 with Joint Angle Information",
    "/gpt_4/prompts/prompt_set_joint_angle.py:223-237": "Extract Joint Angles from Response",
    "/gpt_4/prompts/prompt_set_joint_angle.py:45-82": "Interacting with Door and Faucet via Robotic Arm",
    "/gpt_4/prompts/prompt_set_joint_angle.py:83-117": "Designing Robot Arm with Door and Drawer",
    "/gpt_4/prompts/prompt_spatial_relationship.py": "GPT-4 Refrigerator Spatial Relationships",
    "/gpt_4/prompts/prompt_spatial_relationship.py:1-18": "Spatial Relationship Task Definition",
    "/gpt_4/prompts/prompt_spatial_relationship.py:121-156": "Automating Storage Furniture Operations",
    "/gpt_4/prompts/prompt_spatial_relationship.py:156-185": "Spatial Relationship Task Planner",
    "/gpt_4/prompts/prompt_spatial_relationship.py:18-51": "Spatial Relationships of Refrigerator Components",
    "/gpt_4/prompts/prompt_spatial_relationship.py:186-230": "Spatial Relationship Query Function",
    "/gpt_4/prompts/prompt_spatial_relationship.py:231-267": "AI-based Spatial Relationship Prompt Generation",
    "/gpt_4/prompts/prompt_spatial_relationship.py:268-297": "Generate Spatial Relationships with GPT-4",
    "/gpt_4/prompts/prompt_spatial_relationship.py:298-306": "Spatial Relationship Parser",
    "/gpt_4/prompts/prompt_spatial_relationship.py:51-82": "Fridge Item Spatial Relationship",
    "/gpt_4/prompts/prompt_spatial_relationship.py:83-120": "Robotic Drawer Interaction with Articulation Tree",
    "/gpt_4/prompts/prompt_with_scale.py": "Realistic Robotic Arm Simulator with NLP",
    "/gpt_4/prompts/prompt_with_scale.py:1-31": "Realistic Robotic Arm Object Size Adjustment",
    "/gpt_4/prompts/prompt_with_scale.py:31-63": "Correcting Object Sizes in Python Code",
    "/gpt_4/prompts/prompt_with_scale.py:63-82": "Distractor Object Size Correction",
    "/gpt_4/prompts/prompt_with_scale.py:83-90": "Empty String List for Assistant Responses",
    "/gpt_4/prompts/utils.py": "Franka Panda YAML Configuration Generator",
    "/gpt_4/prompts/utils.py:1-15": "Franka Panda Scene Config YAML",
    "/gpt_4/prompts/utils.py:106-132": "Kitchen Pot Properties",
    "/gpt_4/prompts/utils.py:133-158": "Chair Semantics in Code",
    "/gpt_4/prompts/utils.py:15-22": "Object Specification Guidelines",
    "/gpt_4/prompts/utils.py:159-202": "Box with Articulation Tree Creation and Item Placement",
    "/gpt_4/prompts/utils.py:204-234": "URDF Refrigerator Model Definition",
    "/gpt_4/prompts/utils.py:23-27": "Object Position and Moveability in Task Context",
    "/gpt_4/prompts/utils.py:235-259": "Parse YAML from Response",
    "/gpt_4/prompts/utils.py:260-287": "Task Parser and YAML Saver",
    "/gpt_4/prompts/utils.py:28-50": "YAML Configuration Generator",
    "/gpt_4/prompts/utils.py:288-304": "Extract Task Details from Response",
    "/gpt_4/prompts/utils.py:305-328": "String Split and Append Utilities",
    "/gpt_4/prompts/utils.py:329-343": "GPT-4 Task YAML Config Generator",
    "/gpt_4/prompts/utils.py:344-366": "URDF Configuration File Creation",
    "/gpt_4/prompts/utils.py:367-384": "Code Generates Headers and Solutions",
    "/gpt_4/prompts/utils.py:385-402": "Query and Save Spatial Relationships",
    "/gpt_4/prompts/utils.py:402-414": "Saving RoboGen Config File",
    "/gpt_4/prompts/utils.py:51-75": "Toaster Joint Structure and Integration",
    "/gpt_4/prompts/utils.py:76-105": "Modeling a Toaster's Bread Slice",
    "/gpt_4/query.py": "Query Function with OpenAI Integration",
    "/gpt_4/query.py:1-35": "GPT-4 Query Function",
    "/gpt_4/query.py:36-59": "OpenAI Chat Completion Implementation",
    "/gpt_4/verification.py": "Text Similarity Checker via GPU-enabled SentenceTransformer",
    "/install_ompl_1.5.2.sh": "Ompl Installation Script",
    "/install_ompl_1.5.2.sh:1-31": "ROS Dependencies Installer",
    "/install_ompl_1.5.2.sh:127-143": "OMPL Library Installation Script",
    "/install_ompl_1.5.2.sh:32-54": "Comprehensive OMPL Installation Guide",
    "/install_ompl_1.5.2.sh:55-85": "OMPL Install Dependencies and Libraries",
    "/install_ompl_1.5.2.sh:86-126": "Install OMPL 1.5.2 Shell Script",
    "/locomotion/atlas/meshes_unplugged/convert.bat": "Robot Mesh Conversion Script",
    "/locomotion/atlas/meshes_v3/convert.bat": "Assimp Conversion: Daemon to Obj Files",
    "/locomotion/atlas/multisense_sl_description/meshes/convert.bat": "DAE to OBJ Conversion Script",
    "/locomotion/gpt_reward_api.py": "GPT Reward API for Robotic Movements",
    "/locomotion/gpt_reward_api.py:1-26": "GPT Reward API for PyBullet",
    "/locomotion/gpt_reward_api.py:27-29": "Alpha Energy Reward",
    "/locomotion/sim.py": "PyBullet Robot Simulation Setup",
    "/locomotion/sim.py:1-36": "Robot Simulation Environment Setup",
    "/locomotion/sim.py:103-140": "Motor Angles Init for RoboGen",
    "/locomotion/sim.py:141-169": "Initializing and Loading Robot Model with PyBullet Engine",
    "/locomotion/sim.py:170-187": "Setting Joint Limits for 'Anymal' Robot",
    "/locomotion/sim.py:188-221": "PyBullet Locomotion Simulator Class",
    "/locomotion/sim.py:222-246": "Robot Locomotion Class",
    "/locomotion/sim.py:248-269": "Camera and Rendering Class",
    "/locomotion/sim.py:270-298": "PyBullet Robot Data Retriever",
    "/locomotion/sim.py:37-73": "Simulation Environment Setup",
    "/locomotion/sim.py:74-102": "Initialize Robot Model and Physics Engine",
    "/manipulation/agent.py": "Agent: Managing Robot Joints and PhysX",
    "/manipulation/agent.py:1-29": "Agent Class Initialization and Control",
    "/manipulation/agent.py:111-127": "IK & Joint Limits in Agent Class",
    "/manipulation/agent.py:128-146": "Rest Pose Check and Joint Limits Setup",
    "/manipulation/agent.py:147-166": "Python PhysX Robot Joint Manipulation Functions",
    "/manipulation/agent.py:166-166": "Set Joint State for Robots",
    "/manipulation/agent.py:30-53": "Agent Joint, Position & Velocity Functions",
    "/manipulation/agent.py:54-68": "Agent's Link State Computation",
    "/manipulation/agent.py:69-91": "Robot Joint Manipulation Functions",
    "/manipulation/agent.py:92-110": "Set Joint Limits for Inverse Kinematics Calculations",
    "/manipulation/assets/franka_mobile/LICENSE.txt": "Apache License 2.0: Permissive Software Agreement",
    "/manipulation/assets/franka_mobile/LICENSE.txt:1-21": "Apache License 2.0 Framework",
    "/manipulation/assets/franka_mobile/LICENSE.txt:113-130": "Derivative Work Documentation Requirements",
    "/manipulation/assets/franka_mobile/LICENSE.txt:131-147": "Terms and Conditions for Using \"Work\"",
    "/manipulation/assets/franka_mobile/LICENSE.txt:148-163": "Limits of Liability for Software Users",
    "/manipulation/assets/franka_mobile/LICENSE.txt:165-176": "Redistribution Liability and Indemnification",
    "/manipulation/assets/franka_mobile/LICENSE.txt:23-42": "Defining License Terms",
    "/manipulation/assets/franka_mobile/LICENSE.txt:43-57": "Defining Derivative Works and Contributions in Licenses",
    "/manipulation/assets/franka_mobile/LICENSE.txt:58-75": "Permissive License Terms",
    "/manipulation/assets/franka_mobile/LICENSE.txt:76-91": "Patent License and Redistribution Terms",
    "/manipulation/assets/franka_mobile/LICENSE.txt:92-112": "Open Source License Conditions",
    "/manipulation/gpt_primitive_api.py": "GPT Primitive API: Robotic Grasping and Manipulation",
    "/manipulation/gpt_primitive_api.py:1-34": "Primitive API for Object Grasping",
    "/manipulation/gpt_primitive_api.py:111-141": "Reset, Save and Approach",
    "/manipulation/gpt_primitive_api.py:142-161": "Robot Arm Joint Angles from Object Normal Distributions",
    "/manipulation/gpt_primitive_api.py:162-181": "Robot Arm Motion Planning and Control",
    "/manipulation/gpt_primitive_api.py:182-197": "PyBullet Robot Arm IK Manipulation",
    "/manipulation/gpt_primitive_api.py:198-214": "Robot Arm Simulation and Collision Handling",
    "/manipulation/gpt_primitive_api.py:215-242": "Primitive Motion Planning and State Saving",
    "/manipulation/gpt_primitive_api.py:243-268": "Normal Estimation for Object Manipulation",
    "/manipulation/gpt_primitive_api.py:269-287": "Bounding Box Center Calculation and Robot Alignment",
    "/manipulation/gpt_primitive_api.py:288-307": "Robot Arm Path Planning and Control",
    "/manipulation/gpt_primitive_api.py:308-326": "Inverse Kinematics for Robot Arm Motion Planning",
    "/manipulation/gpt_primitive_api.py:327-342": "Robot Suction Collision Detection",
    "/manipulation/gpt_primitive_api.py:344-361": "Collision Retry and Failure Handling in Motion Planning",
    "/manipulation/gpt_primitive_api.py:35-59": "Grasp and Save States",
    "/manipulation/gpt_primitive_api.py:60-87": "Grasp Primitive: Check Base Time",
    "/manipulation/gpt_primitive_api.py:87-110": "Suction Activation Image Collection",
    "/manipulation/gpt_reward_api.py": "RoboGen Manipulation API",
    "/manipulation/gpt_reward_api.py:1-26": "GPT-based Manipulation Rewards",
    "/manipulation/gpt_reward_api.py:110-123": "End-Effector Position and Finger Angles",
    "/manipulation/gpt_reward_api.py:124-149": "Simulator Interface Functions",
    "/manipulation/gpt_reward_api.py:151-175": "Manipulation API: Link States, Joint Control",
    "/manipulation/gpt_reward_api.py:176-203": "Grasp Detection and Rendering with Joint Values",
    "/manipulation/gpt_reward_api.py:204-225": "Target Object Imaging Script",
    "/manipulation/gpt_reward_api.py:226-248": "Target Image Comparison for Reward Calculation",
    "/manipulation/gpt_reward_api.py:249-273": "Image Difference and Masking Algorithm",
    "/manipulation/gpt_reward_api.py:27-54": "Gripper Functions for Object Manipulation",
    "/manipulation/gpt_reward_api.py:275-297": "Link Position Adjustment Algorithm",
    "/manipulation/gpt_reward_api.py:298-317": "Retrieve Joint Index from Object Link",
    "/manipulation/gpt_reward_api.py:55-83": "Grasped Object and Joint Limit Finder",
    "/manipulation/gpt_reward_api.py:84-110": "URDF Functions for PyBullet Simulator",
    "/manipulation/grasping_utils.py": "Grasping Utilities: Voxelizing, Rotating, Aligning",
    "/manipulation/grasping_utils.py:1-30": "Grasping Utilities Functions",
    "/manipulation/grasping_utils.py:31-60": "Grasping Utils: Alignment, Frame, Point Clouds",
    "/manipulation/grasping_utils.py:61-74": "Voxelized Point Cloud Normal Estimation",
    "/manipulation/motion_planning_utils.py": "OMPL-Based Motion Planning in RoboGen",
    "/manipulation/motion_planning_utils.py:1-22": "Collision-Free IK Solution with OMPL",
    "/manipulation/motion_planning_utils.py:23-47": "Random IK Rest Pose Sampling Algorithm",
    "/manipulation/motion_planning_utils.py:48-70": "OMPL-Based Motion Planning in RoboGen",
    "/manipulation/motion_planning_utils.py:71-84": "OMPL Path Planning with Joint Limit Checks",
    "/manipulation/panda.py": "Panda Robot Initialization",
    "/manipulation/panda.py:1-25": "Panda Robot Arm Initialization",
    "/manipulation/panda.py:27-35": "Panda Object Initialization with URDF",
    "/manipulation/partnet_category.py": "PartNet Categories for Robotic Manipulation",
    "/manipulation/robot.py": "PyBullet Robot Control",
    "/manipulation/robot.py:1-22": "Robot Class Initialization",
    "/manipulation/robot.py:23-29": "Fixed Joint Control in PyBullet Engine",
    "/manipulation/sawyer.py": "Sawyer Robot Class Initialization",
    "/manipulation/sawyer.py:1-25": "Sawyer Robot Class Definition",
    "/manipulation/sawyer.py:27-42": "Sawyer Robot Initialization",
    "/manipulation/sim.py": "PyBullet-Powered Robot Simulation",
    "/manipulation/sim.py:1-29": "SimpleEnv for Manipulation Simulation",
    "/manipulation/sim.py:102-120": "Observation Space Initialization",
    "/manipulation/sim.py:121-147": "Initializing Simulation and Retrieving AABB Bounds",
    "/manipulation/sim.py:148-170": "Bounding Box Adjustment Algorithm",
    "/manipulation/sim.py:171-194": "Robot Simulator Setup"
}