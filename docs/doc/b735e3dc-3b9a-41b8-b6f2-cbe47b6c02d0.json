{
    "summary": "The given code defines the UR5 class, which inherits from Robot and takes optional parameters for controllable_joints, slider, and floating. It initializes a Robot instance with the specified parameters and sets up variables for the UR5 robot model.",
    "details": [
        {
            "comment": "This code defines a class \"UR5\" that inherits from \"Robot\". It takes optional parameters for controllable_joints, slider, and floating. Depending on the values of these parameters, it sets the joint indices, end effector index, and gripper indices accordingly. If floating is True, all joint indices are set to an empty list and end effector index is set to -1. The class initializes a Robot instance with the specified parameters.",
            "location": "\"/media/root/Prima/works/RoboGen/docs/src/manipulation/ur5.py\":0-24",
            "content": "import os\nimport numpy as np\nimport pybullet as p\nfrom .robot import Robot\nclass UR5(Robot):\n    def __init__(self, controllable_joints='right', slider=True, floating=False):\n        self.slider = slider\n        self.floating = floating\n        if not floating:\n            if not slider:\n                right_arm_joint_indices = [0, 1, 2, 3, 4, 5, 6] # Controllable arm joints\n                right_end_effector = 11 # Used to get the pose of the end effector\n                right_gripper_indices = [9, 10] # Gripper actuated joints\n            else:\n                right_arm_joint_indices = [0, 1, 2, 4, 5, 6, 7, 8, 9, 10]\n                right_end_effector = 21 # Used to get the pose of the end effector\n                right_gripper_indices = [21, 19] # Gripper actuated joints\n        else:\n            right_arm_joint_indices = []\n            right_end_effector = -1\n            right_gripper_indices = [0, 1]\n        super(UR5, self).__init__(controllable_joints, right_arm_joint_indices, right_end_effector, right_gripper_indices)"
        },
        {
            "comment": "The code initializes the UR5 robot by loading its model and retrieving joint information. It checks for fixed joints, selects controllable joints, and sets up necessary variables for the UR5 class initialization.",
            "location": "\"/media/root/Prima/works/RoboGen/docs/src/manipulation/ur5.py\":26-40",
            "content": "    def init(self, directory, id, np_random, fixed_base=False, use_suction=True):\n        self.body = p.loadURDF(os.path.join(directory, 'ur5', 'ur5_robotiq85_mobile.urdf'), useFixedBase=fixed_base, basePosition=[-1, -1, 0.5], flags=p.URDF_USE_SELF_COLLISION, physicsClientId=id)\n        for i in range(p.getNumJoints(self.body, physicsClientId=id)):\n            print(p.getJointInfo(self.body, i, physicsClientId=id))\n            link_name = p.getJointInfo(self.body, i, physicsClientId=id)[12].decode('utf-8')\n            print(\"link_name: \", link_name)\n        all_joint_num = p.getNumJoints(self.body)\n        all_joint_idx = list(range(all_joint_num))\n        joint_idx = [j for j in all_joint_idx if self._is_not_fixed(j)]\n        self.right_arm_joint_indices = joint_idx\n        self.controllable_joint_indices = self.right_arm_joint_indices\n        super(UR5, self).init(self.body, id, np_random)"
        }
    ]
}