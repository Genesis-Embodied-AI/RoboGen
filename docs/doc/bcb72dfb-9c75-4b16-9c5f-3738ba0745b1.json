{
    "summary": "This code segment extracts object details from a YAML string and adjusts the size based on object type. It appears to be part of a larger program involving 3D models based on user input, creating new content by formatting task description and object details, and processing responses containing YAML data to correct mesh/urdf size values.",
    "details": [
        {
            "comment": "This function, adjust_size_v2(), extracts object names and sizes from a yaml string. It checks the type of each object and adjusts its size accordingly. If an object is a mesh, urdf, or sphere, it simply appends the size to the list of object sizes. However, if the object is a cylinder, cube, or box, it uses the parse_center() function to extract the center coordinates of the object and converts the size values to strings for storage in the object_sizes list. The extracted names, types, and sizes are then returned as output parameters. This function seems to be part of a larger program that likely involves manipulation or generation of 3D models based on user input.",
            "location": "\"/media/root/Prima/works/RoboGen/docs/src/gpt_4/adjust_size.py\":0-24",
            "content": "from gpt_4.query import query\nfrom gpt_4.prompts.prompt_with_scale import user_contents_v2 as scale_user_contents_v2, assistant_contents_v2 as scale_assistant_contents_v2\nimport yaml\nimport re\nfrom manipulation.utils import parse_center\nimport copy\ndef adjust_size_v2(task_description, yaml_string, save_path, temperature=0.2, model='gpt-4'):\n    # extract object names and sizes\n    object_names = []\n    object_sizes = []\n    object_types = []\n    config = yaml.safe_load(yaml_string)\n    for obj in config:\n        if \"name\" in obj:\n            object_names.append(obj['name'].lower())\n            object_types.append(obj['type'])\n            if obj['type'] == 'mesh' or obj['type'] == 'urdf' or obj['type'] == 'sphere':\n                object_sizes.append(obj['size'])\n            if obj['type'] in ['cylinder', 'cube', 'box']:\n                if isinstance(obj['size'], list):\n                    object_sizes.append([str(x) for x in obj[\"size\"]])\n                else:\n                    object_sizes.append([str(x) for x in parse_center(obj['size'])])"
        },
        {
            "comment": "This code segment is creating a new user content by formatting task description and object details in a specific format. It then appends this new content to the input_user list for further processing by an assistant model. The system message is set to \"You are a helpful assistant\", and the code calls the query function passing the system, input_user, scale_assistant_contents_v2, save_path, debug, temperature, and model parameters.",
            "location": "\"/media/root/Prima/works/RoboGen/docs/src/gpt_4/adjust_size.py\":26-45",
            "content": "    new_user_contents = \"```\\n\"\n    better_task_description = re.sub(r'\\d', '', task_description)\n    better_task_description = better_task_description.replace(\"_\", \" \")\n    better_task_description = better_task_description.lstrip()\n    better_task_description = better_task_description.strip()\n    new_user_contents += \"Task: {}\\n\".format(better_task_description)\n    for name, type, size in zip(object_names, object_types, object_sizes):\n        if type in ['mesh', 'urdf', 'sphere']:\n            new_user_contents += \"{}, {}, {}\\n\".format(name, type, size)\n        else:\n            new_content = \"{}, {}, \".format(name, type)\n            size_string = \", \".join(size)\n            new_content = new_content + size_string + \"\\n\"\n            new_user_contents += new_content\n    new_user_contents += \"```\"\n    input_user = copy.deepcopy(scale_user_contents_v2)\n    input_user.append(new_user_contents)\n    system = \"You are a helpful assistant.\"\n    response = query(system, input_user, scale_assistant_contents_v2, save_path=save_path, debug=False, temperature=temperature, model=model)"
        },
        {
            "comment": "This code processes a response containing YAML data, extracting and correcting the mesh/urdf size values based on their names. It identifies YAML blocks by searching for \"```yaml\" and \"```\", splits name and size values, converts sizes to float, and updates the 'size' attribute in the 'config' object with corrected size values.",
            "location": "\"/media/root/Prima/works/RoboGen/docs/src/gpt_4/adjust_size.py\":47-71",
            "content": "    response = response.split('\\n')\n    corrected_names = []\n    corrected_sizes = []\n    for idx, line in enumerate(response):\n        if \"```yaml\" in line:\n            for idx2 in range(idx+1, len(response)):\n                line2 = response[idx2]\n                if \"```\" in line2:\n                    break\n                line2 = line2.split(\", \")\n                corrected_names.append(line2[0].lower())\n                sizes = line2[2:]\n                if len(sizes) > 1:\n                    corrected_sizes.append([float(x) for x in sizes])\n                else:\n                    corrected_sizes.append(float(sizes[0]))\n    # replace the size in yaml\n    for obj in config:\n        if 'type' in obj:\n            if obj['type'] == 'mesh' or obj['type'] == 'urdf':\n                obj['size'] = corrected_sizes[corrected_names.index(obj['name'].lower())]\n    return config"
        }
    ]
}