{
    "summary": "This code creates a robot arm, assigns tasks, constructs an articulation tree for links and joints, and manipulates objects using appropriate grippers. It also generates config paths and distractor files with customizable temperature and model settings.",
    "details": [
        {
            "comment": "This code imports functions from various modules, including query, build_task_given_text, and prompt_distractor. It also imports time, datetime, os, and copy modules. The user_contents list contains task descriptions for a robot arm to manipulate articulated objects in household scenarios using a Franka Panda robot in a simulator.",
            "location": "\"/media/root/Prima/works/RoboGen/docs/src/gpt_4/prompts/prompt_from_description.py\":0-12",
            "content": "from gpt_4.query import query\nfrom gpt_4.prompts.utils import build_task_given_text\nfrom gpt_4.prompts.prompt_distractor import generate_distractor\nimport time, datetime, os, copy\nuser_contents = [\n\"\"\"\nI will give you a task name, which is for a robot arm to learn to manipulate an articulated object in household scenarios. I will provide you with the articulated object\u2019s articulation tree and semantics. Your goal is to expand the task description to more information needed for the task. You can think of the robotic arm as a Franka Panda robot. The task will be built in a simulator for the robot to learn it. \nGiven a task name, please reply with the following additional information in the following format: \nDescription: some basic descriptions of the tasks. \nAdditional Objects: Additional objects other than the provided articulated object required for completing the task. If no additional objects are needed, this should be None. \nLinks: Links of the articulated objects that are required to perform the task. "
        },
        {
            "comment": "This code represents the articulation tree for a task, including links and joints required to complete the task. Each link is needed for a specific reason related to the task, while each joint has a specified type and parent-child relationship. The example input provides an oven as the task and defines its associated links and joints in the articulation tree format.",
            "location": "\"/media/root/Prima/works/RoboGen/docs/src/gpt_4/prompts/prompt_from_description.py\":13-43",
            "content": "- Link 1: reasons why this link is needed for the task\n- Link 2: reasons why this link is needed for the task\n- \u2026\nJoints: Joints of the articulated objects that are required to perform the task. \n- Joint 1: reasons why this joint is needed for the task\n- Joint 2: reasons why this joint is needed for the task\n- \u2026\nExample Input: \nTask name: Heat a hamburger Inside Oven\n```Oven articulation tree\nlinks: \nbase\nlink_0\nlink_1\nlink_2\nlink_3\nlink_4\nlink_5\nlink_6\nlink_7\njoints: \njoint_name: joint_0 joint_type: revolute parent_link: link_7 child_link: link_0\njoint_name: joint_1 joint_type: continuous parent_link: link_7 child_link: link_1\njoint_name: joint_2 joint_type: continuous parent_link: link_7 child_link: link_2\njoint_name: joint_3 joint_type: continuous parent_link: link_7 child_link: link_3\njoint_name: joint_4 joint_type: continuous parent_link: link_7 child_link: link_4\njoint_name: joint_5 joint_type: continuous parent_link: link_7 child_link: link_5\njoint_name: joint_6 joint_type: continuous parent_link: link_7 child_link: link_6"
        },
        {
            "comment": "This code defines a robot arm with specific links and joints, and provides a description of the actions performed by the robot in relation to an oven. The links represent different parts of the oven such as the door, knobs, etc., while the joints are the connections between these links. The task is to manipulate the oven by opening the door and setting the temperature using the knob.",
            "location": "\"/media/root/Prima/works/RoboGen/docs/src/gpt_4/prompts/prompt_from_description.py\":44-66",
            "content": "joint_name: joint_7 joint_type: fixed parent_link: base child_link: link_7\n```\n```Oven semantics\nlink_0 hinge door\nlink_1 hinge knob\nlink_2 hinge knob\nlink_3 hinge knob\nlink_4 hinge knob\nlink_5 hinge knob\nlink_6 hinge knob\nlink_7 heavy oven_body\n```\nExample output:\nDescription: The robot arm places a hamburger inside the oven, and sets the oven temperature to be appropriate for heating the hamburger.\nAdditional Objects: hamburger\nLinks:\n- link_0: link_0 is the oven door from the semantics. The robot needs to open the door in order to put the hamburger inside the oven.\nlink_1: the robot needs to approach link_1, which is the temperature knob, to rotate it to set the desired temperature.\nJoints:\n- joint_0: from the articulation tree, this is the revolute joint that connects link_0 (the door). Therefore, the robot needs to actuate this joint for opening the door.\n- joint_1: from the articulation tree, joint_1 connects link_1, which is the temperature knob. The robot needs to actuate it to rotate link_1 to the desired temperature."
        },
        {
            "comment": "This code represents a task where the robot arm needs to open a safe, retrieve an item inside it and then close the safe again. It includes information about the articulation tree structure of the safe, its links (safe door, knob, and safe body), and joints (revolute, continuous, and fixed).",
            "location": "\"/media/root/Prima/works/RoboGen/docs/src/gpt_4/prompts/prompt_from_description.py\":68-98",
            "content": "Another example:\nInput:\nTask name: Retrieve Item from Safe\n```Safe articulation tree\nlinks: \nbase\nlink_0\nlink_1\nlink_2\njoints: \njoint_name: joint_0 joint_type: revolute parent_link: link_2 child_link: link_0\njoint_name: joint_1 joint_type: continuous parent_link: link_0 child_link: link_1\njoint_name: joint_2 joint_type: fixed parent_link: base child_link: link_2\n```\n```Safe semantics\nlink_0 hinge door\nlink_1 hinge knob\nlink_2 heavy safe_body\n```\nOutput: \nDescription: The robot arm opens the safe, retrieves an item from inside it, and then closes the safe again.\nAdditional Objects: Item to retrieve from safe.\nLinks:\n- link_0: Link_0 is the safe door from the semantics. The robot needs to open the door in order to retrieve the item from the safe.\n- link_1: Link_1 is the safe knob. The robot needs to rotate this knob both to open the safe and to lock it again after retrieving the item.\nJoints:\n- joint_0: From the articulation tree, this is the revolute joint that connects link_0. The robot needs to actuate this joint to open and close the door."
        },
        {
            "comment": "Task Name: Move Object\n\nObject Articulation Tree:\nLinks: \n- base\n- link_1 (object)\n- link_2 (robot end effector)\nJoints:\n- joint_name: joint_0 joint_type: revolute parent_link: base child_link: link_1\n- joint_name: joint_1 joint_type: revolute parent_link: link_1 child_link: link_2\nObject Semantics: \n- link_1: static object to be moved by the robot. The robot needs to approach this link and actuate the appropriate joints to move the object.\n- link_2: end effector of the robot that will grip the object for manipulation.\n\nOutput: Description: The robotic arm will move the object. Additional Objects: None.",
            "location": "\"/media/root/Prima/works/RoboGen/docs/src/gpt_4/prompts/prompt_from_description.py\":99-131",
            "content": "- joint_1: From the articulation tree, joint_1 connects link_1, which is the safe knob. The robot needs to actuate this joint to rotate link_1 and both unlock and lock the safe.\nOne more example:\nTask Name: Open Door\n```Door articulation tree\nlinks: \nbase\nlink_0\nlink_1\nlink_2\njoints: \njoint_name: joint_0 joint_type: revolute parent_link: link_1 child_link: link_0\njoint_name: joint_1 joint_type: fixed parent_link: base child_link: link_1\njoint_name: joint_2 joint_type: revolute parent_link: link_0 child_link: link_2\n```\n```Door semantics\nlink_0 hinge rotation_door\nlink_1 static door_frame\nlink_2 hinge rotation_door\n```\nOutput:\nDescription: The robotic arm will open the door.\nAdditional Objects: None\nLinks:\n- link_0: from the semantics, this is the hinge rotation door. The robot needs to approach this link in order to open it. \nJoints: \n- joint_0: from the articulation tree, this is the revolute joint that connects link_0. Therefore, the robot needs to actuate this joint for opening the door.\nCan you do the same for the following task and object:"
        },
        {
            "comment": "This function parses a task response, extracts description and additional objects, and handles links and joints by looping through the response lines. It removes unnecessary characters from the description and handles multiple lines for involved links and joints.",
            "location": "\"/media/root/Prima/works/RoboGen/docs/src/gpt_4/prompts/prompt_from_description.py\":132-154",
            "content": "\"\"\"\n]\ndef parse_response(task_response):\n    task_response = '\\n'.join([line for line in task_response.split('\\n') if line.strip()])\n    task_response = task_response.split('\\n')\n    task_description = None\n    additional_objects = None\n    links = None\n    joints = None\n    for l_idx, line in enumerate(task_response):\n        if line.lower().startswith(\"description:\"):\n            task_description = task_response[l_idx].split(\":\")[1].strip()\n            task_description = task_description.replace(\"/\", \" or \").replace(\".\", \"\").replace(\"'\", \"\").replace('\"', \"\").replace(\")\", \"\").replace(\"(\", \"\")\n            additional_objects = task_response[l_idx+1].split(\":\")[1].strip()\n            involved_links = \"\"\n            for link_idx in range(l_idx+3, len(task_response)):\n                if task_response[link_idx].lower().startswith(\"joints:\"):\n                    break\n                else:\n                    involved_links += (task_response[link_idx][2:])\n            links = involved_links\n            involved_joints = \"\""
        },
        {
            "comment": "This code aims to find the joints involved in a task description and return them. It starts by iterating through each line of the task response, breaking when a line without a \"- \" prefix is found. The involved joints are then stored in the `involved_joints` variable. The function expands the task name, object category, and object path to create a save folder for gpt_response. It also provides the paths for articulation tree and saves the task generation as a json file.",
            "location": "\"/media/root/Prima/works/RoboGen/docs/src/gpt_4/prompts/prompt_from_description.py\":155-176",
            "content": "            for joint_idx in range(link_idx+1, len(task_response)):\n                if not task_response[joint_idx].lower().startswith(\"- \"):\n                    break\n                else:\n                    involved_joints += (task_response[joint_idx][2:])\n            joints = involved_joints\n            break\n    return task_description, additional_objects, links, joints\ndef expand_task_name(task_name, object_category, object_path, meta_path=\"generated_task_from_description\", temperate=0, model=\"gpt-4\"):\n    ts = time.time()\n    time_string = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d-%H-%M-%S')\n    save_folder = \"data/{}/{}_{}_{}_{}\".format(meta_path, task_name.replace(\" \", \"_\"), object_category, object_path, time_string)\n    if not os.path.exists(save_folder + \"/gpt_response\"):\n        os.makedirs(save_folder + \"/gpt_response\")\n    save_path = \"{}/gpt_response/task_generation.json\".format(save_folder)\n    articulation_tree_path = f\"data/dataset/{object_path}/link_and_joint.txt\"\n    with open(articulation_tree_path, 'r') as f:"
        },
        {
            "comment": "This code reads articulation tree and semantics from files, generates a filled task user content by combining task name, articulation tree, and semantics, sets up a system as \"You are a helpful assistant\", queries the GPT model with the filled task user content to get a response, parses the response to extract task description, additional objects, links, and joints, and finally returns these results along with other relevant information.",
            "location": "\"/media/root/Prima/works/RoboGen/docs/src/gpt_4/prompts/prompt_from_description.py\":177-202",
            "content": "        articulation_tree = f.readlines()\n    semantics = f\"data/dataset/{object_path}/semantics.txt\"\n    with open(semantics, 'r') as f:\n        semantics = f.readlines()\n    task_user_contents_filled = copy.deepcopy(user_contents[0])\n    task_name_filled = \"Task name: {}\\n\".format(task_name)\n    articulation_tree_filled = \"\"\"\n```{} articulation tree\n{}\n```\"\"\".format(object_category, \"\".join(articulation_tree))\n    semantics_filled = \"\"\"\n```{} semantics\n{}\n```\"\"\".format(object_category, \"\".join(semantics))\n    task_user_contents_filled = task_user_contents_filled + task_name_filled + articulation_tree_filled + semantics_filled\n    system = \"You are a helpful assistant.\"\n    task_response = query(system, [task_user_contents_filled], [], save_path=save_path, debug=False, temperature=0, model=model)\n    ### parse the response\n    task_description, additional_objects, links, joints = parse_response(task_response)    \n    return task_description, additional_objects, links, joints, save_folder, articulation_tree_filled, semantics_filled"
        },
        {
            "comment": "This code defines a function `generate_from_task_name` that takes in a task name, object category, and object path as inputs. It uses these inputs to expand the task name and generates a config path based on the expanded description and additional objects. The code also includes a main function that parses arguments for task description and uses numpy and Objaverse Utils' partnet_mobility_dict function.",
            "location": "\"/media/root/Prima/works/RoboGen/docs/src/gpt_4/prompts/prompt_from_description.py\":204-219",
            "content": "def generate_from_task_name(task_name, object_category, object_path, temperature_dict=None, model_dict=None, meta_path=\"generated_task_from_description\"):\n    expansion_model = model_dict.get(\"expansion\", \"gpt-4\")\n    expansion_temperature = temperature_dict.get(\"expansion\", 0)\n    task_description, additional_objects, links, joints, save_folder, articulation_tree_filled, semantics_filled = expand_task_name(\n        task_name, object_category, object_path, meta_path, temperate=expansion_temperature, model=expansion_model)\n    config_path = build_task_given_text(object_category, task_name, task_description, additional_objects, links, joints, \n                          articulation_tree_filled, semantics_filled, object_path, save_folder, temperature_dict, model_dict)\n    return config_path\nif __name__ == \"__main__\":\n    import argparse\n    import numpy as np\n    from objaverse_utils.utils import partnet_mobility_dict\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--task_description', type=str, default=\"put a pen into the box\")"
        },
        {
            "comment": "This code sets up arguments for an object and its path, then defines dictionaries for temperature and model configurations. It asserts that the selected object is from PartNet Mobility dataset and randomly assigns a valid object_path if not specified. Finally, it generates a configuration file using generate_from_task_name function with provided inputs.",
            "location": "\"/media/root/Prima/works/RoboGen/docs/src/gpt_4/prompts/prompt_from_description.py\":220-246",
            "content": "    parser.add_argument('--object', type=str, default=\"Box\")\n    parser.add_argument('--object_path', type=str, default=\"100426\")\n    args = parser.parse_args()\n    temperature_dict = {\n        \"reward\": 0,\n        \"yaml\": 0,\n        \"size\": 0,\n        \"joint\": 0,\n        \"spatial_relationship\": 0,\n    }\n    model_dict = {\n        \"reward\": \"gpt-4\",\n        \"yaml\": \"gpt-4\",\n        \"size\": \"gpt-4\",\n        \"joint\": \"gpt-4\",\n        \"spatial_relationship\": \"gpt-4\",\n    }\n    meta_path = \"generated_task_from_description\"\n    assert args.object in partnet_mobility_dict.keys(), \"You should use articulated objects in the PartNet Mobility dataset.\"\n    if args.object_path is None:\n        possible_object_ids = partnet_mobility_dict[args.object]\n        args.object_path = possible_object_ids[np.random.randint(len(possible_object_ids))]\n    config_path = generate_from_task_name(args.task_description, args.object, args.object_path, \n        temperature_dict=temperature_dict, meta_path=meta_path, model_dict=model_dict)"
        },
        {
            "comment": "This function is calling the \"generate_distractor\" method, taking in two parameters: \"config_path\" and an optional \"temperature_dict\". It also has a second optional parameter called \"model_dict\". The purpose of this code may be to generate a distractor using the provided configuration path, possibly with customizable temperature and model settings.",
            "location": "\"/media/root/Prima/works/RoboGen/docs/src/gpt_4/prompts/prompt_from_description.py\":247-247",
            "content": "    generate_distractor(config_path, temperature_dict=temperature_dict, model_dict=model_dict)"
        }
    ]
}