{
    "summary": "The code initializes a Sawyer robot class that extends Robot, sets controllable joints and determines end effector position and gripper joint indices based on the arm type (slider or floating). It loads URDF files, checks for joint controllability, and prints debugging information.",
    "details": [
        {
            "comment": "This code defines a Sawyer robot class that extends the Robot class. It initializes slider and floating variables, and sets the controllable joints based on whether the arm is slider or floating. The controllable joint indices, end effector position, and gripper joint indices are determined accordingly for each type of Sawyer configuration.",
            "location": "\"/media/root/Prima/works/RoboGen/docs/src/manipulation/sawyer.py\":0-24",
            "content": "import os\nimport numpy as np\nimport pybullet as p\nfrom .robot import Robot\nclass Sawyer(Robot):\n    def __init__(self, controllable_joints='right', slider=True, floating=False):\n        self.slider = slider\n        self.floating = floating\n        if not floating:\n            if not slider:\n                right_arm_joint_indices = [0, 1, 2, 3, 4, 5, 6] # Controllable arm joints\n                right_end_effector = 11 # Used to get the pose of the end effector\n                right_gripper_indices = [9, 10] # Gripper actuated joints\n            else:\n                right_arm_joint_indices = [0, 1, 2, 4, 5, 6, 7, 8, 9, 10]\n                right_end_effector = 26 # Used to get the pose of the end effector\n                right_gripper_indices = [25, 23] # Gripper actuated joints\n        else:\n            right_arm_joint_indices = []\n            right_end_effector = -1\n            right_gripper_indices = [0, 1]\n        super(Sawyer, self).__init__(controllable_joints, right_arm_joint_indices, right_end_effector, right_gripper_indices)"
        },
        {
            "comment": "This code initializes a Sawyer robot by loading the URDF file, checking joints for controllability, and setting up class attributes. It also prints joint information and link names for debugging purposes.",
            "location": "\"/media/root/Prima/works/RoboGen/docs/src/manipulation/sawyer.py\":26-41",
            "content": "    def init(self, directory, id, np_random, fixed_base=False, use_suction=True):\n        self.body = p.loadURDF(os.path.join(directory, 'sawyer', 'sawyer_mobile.urdf'), useFixedBase=fixed_base, basePosition=[-1, -1, 0.5], flags=p.URDF_USE_SELF_COLLISION, physicsClientId=id)\n        for i in range(p.getNumJoints(self.body, physicsClientId=id)):\n            print(p.getJointInfo(self.body, i, physicsClientId=id))\n            link_name = p.getJointInfo(self.body, i, physicsClientId=id)[12].decode('utf-8')\n            print(\"link_name: \", link_name)\n        all_joint_num = p.getNumJoints(self.body)\n        all_joint_idx = list(range(all_joint_num))\n        joint_idx = [j for j in all_joint_idx if self._is_not_fixed(j)]\n        self.right_arm_joint_indices = joint_idx\n        self.controllable_joint_indices = self.right_arm_joint_indices\n        print(\"joint_idx: \", joint_idx)\n        super(Sawyer, self).init(self.body, id, np_random)"
        }
    ]
}