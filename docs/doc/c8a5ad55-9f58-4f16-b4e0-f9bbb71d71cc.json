{
    "summary": "This Python script uses argparse to parse arguments, defines dictionaries for temperature values and OpenAI model names, creates folders if necessary, generates task configurations, calls 'generate_distractor', saves meta-information in JSON files with timestamps, sets random seed, checks for locomotion tasks, and learns skills using RL algorithms. It executes \"execute_locomotion.py\" to store learned results.",
    "details": [
        {
            "comment": "This Python script imports various functions and classes, uses argparse to parse command line arguments, defines dictionaries for temperature values and OpenAI model names. It then creates a folder if it doesn't exist and appears to be involved in generating tasks or prompts for some AI system.",
            "location": "\"/media/root/Prima/works/RoboGen/docs/src/run.py\":0-39",
            "content": "from gpt_4.prompts.prompt_manipulation import generate_task as generate_task_manipulation\nfrom gpt_4.prompts.prompt_distractor import generate_distractor\nfrom gpt_4.prompts.prompt_locomotion import generate_task_locomotion\nfrom manipulation.partnet_category import partnet_categories\nimport json\nimport time, datetime\nimport numpy as np\nimport os\nimport yaml\nimport argparse \nparser = argparse.ArgumentParser()\nparser.add_argument('--train', type=int, default=1)\nparser.add_argument('--category', type=str, default=None)\nargs = parser.parse_args()\ntemperature_dict = {\n    \"task_generation\": 0.6,\n    \"reward\": 0.2,\n    \"yaml\": 0.3,\n    \"size\": 0.1,\n    \"joint\": 0,\n    \"spatial_relationship\": 0\n}\nmodel_dict = {\n    \"task_generation\": \"gpt-4\",\n    \"reward\": \"gpt-4\",\n    \"yaml\": \"gpt-4\",\n    \"size\": \"gpt-4\",\n    \"joint\": \"gpt-4\",\n    \"spatial_relationship\": \"gpt-4\"\n}\n### store information\n### generate task, return config path\nmeta_path = \"generated_tasks_release\"\nif not os.path.exists(\"data/{}\".format(meta_path)):\n    os.makedirs(\"data/{}\".format(meta_path))"
        },
        {
            "comment": "This code generates task configurations for manipulation tasks using the 'generate_task_manipulation' function, and then calls the 'generate_distractor' function on each configuration path. It also saves meta-information about temperature and model to JSON files with a timestamp in the file name for identification. The random seed is set based on the current timestamp to ensure reproducibility of the random choices made in the code.",
            "location": "\"/media/root/Prima/works/RoboGen/docs/src/run.py\":40-58",
            "content": "time_string = datetime.datetime.fromtimestamp(time.time()).strftime('%Y-%m-%d-%H-%M-%S')\nsave_folder = \"data/{}/meta-temperature-{}.json\".format(meta_path, time_string)\nwith open(save_folder, 'w') as f:\n    json.dump(temperature_dict, f, indent=4)\nsave_folder = \"data/{}/meta-model-{}.json\".format(meta_path, time_string)\nwith open(save_folder, 'w') as f:\n    json.dump(model_dict, f, indent=4)\nnp.random.seed(int(time.time()))\ngen_func = np.random.choice(['manipulation', 'locomotion'])\ngen_func = 'manipulation' if args.category is not None else gen_func\nif gen_func == 'manipulation':\n    if args.category is None:\n        object_category = partnet_categories[np.random.randint(len(partnet_categories))]\n    else:\n        object_category = args.category\n    all_task_config_paths = generate_task_manipulation(object_category, temperature_dict=temperature_dict, model_dict=model_dict, meta_path=meta_path)\n    for task_config_path in all_task_config_paths:\n        generate_distractor(task_config_path, temperature_dict=temperature_dict, model_dict=model_dict)"
        },
        {
            "comment": "This code checks if the function is for generating locomotion tasks. If so, it generates all task configurations and prints the path of each task configuration. It then tries to learn skills by running either a single or multiple instances of the RL algorithm depending on the command-line argument \"train\". The learned results are stored in the solution_path.",
            "location": "\"/media/root/Prima/works/RoboGen/docs/src/run.py\":59-80",
            "content": "elif gen_func == 'locomotion':\n    all_task_config_paths = generate_task_locomotion(temperature_dict=temperature_dict, model_dict=model_dict, meta_path=meta_path)\nif args.train:\n    for task_config_path in all_task_config_paths:\n        print(\"trying to learn skill: \", task_config_path)\n        try:\n            if gen_func == 'manipulation':\n                print(\"task_config_path: \", task_config_path)\n                with open(task_config_path, 'r') as f:\n                    task_config = yaml.safe_load(f)\n                solution_path = None\n                for obj in task_config:\n                    if \"solution_path\" in obj:\n                        solution_path = obj[\"solution_path\"]\n                        break\n                ## run RL once for each substep\n                os.system(\"python execute.py --task_config_path {}\".format(task_config_path))\n                ## or run RL multiple times for each substep and pick the best result for next substep\n                # os.system(\"python execute_long_horizon.py --task_config_path {}\".format(task_config_path))"
        },
        {
            "comment": "This code block runs the \"execute_locomotion.py\" script with the specified task configuration file, in case of failure it prints an error message and continues execution.",
            "location": "\"/media/root/Prima/works/RoboGen/docs/src/run.py\":81-89",
            "content": "            else:\n                os.system(\"python execute_locomotion.py --task_config_path {} & \".format(task_config_path))\n        except Exception as e:\n            print(\"=\" * 20, \"an error occurred\", \"=\" * 20)\n            print(\"an error occurred: \", e)\n            print(\"=\" * 20, \"an error occurred\", \"=\" * 20)\n            print(\"failed to execute task: \", task_config_path)\n            continue"
        }
    ]
}