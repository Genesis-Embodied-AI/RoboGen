{
    "summary": "The code defines an articulation tree for a refrigerator and includes a function that utilizes AI (GPT-4) to identify spatial relationships between storage furniture and robot-actuated drawers. It takes input parameters, generates a new input, extracts spatial relationships from the response, and returns them as a list.",
    "details": [
        {
            "comment": "The code is importing necessary modules and defining the user_contents, which will contain details about a task, including its name, description, objects involved, subssteps, and other related information. The special spatial relationships are mentioned for better understanding of how certain objects should be placed or positioned in the initial state of the task.",
            "location": "\"/media/root/Prima/works/RoboGen/docs/src/gpt_4/prompts/prompt_spatial_relationship.py\":0-17",
            "content": "from gpt_4.query import query\nimport copy\nuser_contents = [\n\"\"\"\nYour goal is to output any special spatial relationships certain objects should have in the initial state, given a task. The task is for a robot arm to learn the corresponding skills in household scenarios.  \nThe input to you will include \nthe task name, \na short description of the task, \nobjects involved in the task, \nsubsteps for performing the task,\nIf there is an articulated object involved in the task, the articulation tree of the articulated object, the semantic file of the articulated object, and the links and joints of the articulated objects that will be involved in the task. \nWe have the following spatial relationships:\non, obj_A, obj_B: object A is on top of object B, e.g., a fork on the table.\nin, obj_A, obj_B: object A is inside object B, e.g., a gold ring in the safe.\nin, obj_A, obj_B, link_name: object A is inside the link with link_name of object B. For example, a table might have two drawers, represented with link_0, an"
        },
        {
            "comment": "The code defines the spatial relationships of a refrigerator and its components, including links (base, link_0, link_1, link_2) and joints (joint_0, joint_1, joint_2), and provides an example input for fetching an item from the refrigerator.",
            "location": "\"/media/root/Prima/works/RoboGen/docs/src/gpt_4/prompts/prompt_spatial_relationship.py\":17-50",
            "content": "d link_1, and in(pen, table, link_0) would be that a pen is inside one of the drawers that corresponds to link_0. \nGiven the input to you, you should output any needed spatial relationships of the involved objects. \nHere are some examples:\nInput:\nTask Name:Fetch Item from Refrigerator \nDescription: The robotic arm will open a refrigerator door and reach inside to grab an item and then close the door.\nObjects involved: refrigerator, item\n```refrigerator articulation tree\nlinks: \nbase\nlink_0\nlink_1\nlink_2\njoints: \njoint_name: joint_0 joint_type: fixed parent_link: base child_link: link_0\njoint_name: joint_1 joint_type: revolute parent_link: link_0 child_link: link_1\njoint_name: joint_2 joint_type: revolute parent_link: link_0 child_link: link_2\n```\n```refrigerator semantics\nlink_0 heavy refrigerator_body\nlink_1 hinge door\nlink_2 hinge door\n```\nLinks:\nlink_1: The robot needs to approach and open this link, which represents one of the refrigerator doors, to reach for the item inside.\nJoints:\njoint_1: This joint con"
        },
        {
            "comment": "The code defines the spatial relationship between an item, refrigerator, and link_0 (the body of the refrigerator) to indicate that the item is inside the refrigerator. Additionally, it provides an example of a faucet articulation tree with two links and joints for manipulating the faucet switch.",
            "location": "\"/media/root/Prima/works/RoboGen/docs/src/gpt_4/prompts/prompt_spatial_relationship.py\":50-81",
            "content": "nects link_1, representing one of the doors. The robot needs to actuate this joint to open the door, reach for the item, and close the door. \nsubsteps:\n grasp the refrigerator door\n open the refrigerator door\n grasp the item\n move the item out of the refrigerator\n grasp the refrigerator door again\n close the refrigerator door\nOutput:\nThe goal is for the robot arm to learn to retrieve an item from the refrigerator. Therefore, the item needs to be initially inside the refrigerator. From the refrigerator semantics we know that link_0 is the body of the refrigerator, therefore we should have a spatial relationship as the following:\n```spatial relationship\nIn, item, refrigerator, link_0\n```\nAnother example:\nTask Name: Turn Off Faucet\nDescription: The robotic arm will turn the faucet off by manipulating the switch\nObjects involved: faucet\n```Faucet articulation tree\nlinks: \nbase\nlink_0\nlink_1\njoints: \njoint_name: joint_0 joint_type: fixed parent_link: base child_link: link_0\njoint_name: joint_1 joint_type: revolute parent_link: link_0 child_link: link_1"
        },
        {
            "comment": "The code describes the articulation tree for a storage furniture with three links (base, link_0, link_2) and three joints (joint_0, joint_1, joint_2). The robot arm is tasked to interact with the drawer by picking up an item and placing it inside. No special spatial relationships are required as only two objects are involved.",
            "location": "\"/media/root/Prima/works/RoboGen/docs/src/gpt_4/prompts/prompt_spatial_relationship.py\":82-119",
            "content": "```\n```Faucet semantics\nlink_0 static faucet_base\nlink_1 hinge switch\n```\nLinks: \nlink_0: link_0 is the door. This is the part of the door assembly that the robot needs to interact with.\nJoints:\njoint_0: Joint_0 is the revolute joint connecting link_0 (the door) as per the articulation tree. The robot needs to actuate this joint cautiously to ensure the door is closed.\nsubsteps:\ngrasp the faucet switch\nturn off the faucet\nOutput:\nThere is only 1 object involved in the task, thus no special spatial relationships are required.\n```spatial relationship\nNone\n```\nOne more example:\nTask Name: Store an item inside the Drawer\nDescription: The robot arm picks up an item and places it inside the drawer of the storage furniture.\nObjects involved: storage furniture, item\n```StorageFurniture articulation tree\nlinks: \nbase\nlink_0\nlink_1\nlink_2\njoints: \njoint_name: joint_0 joint_type: revolute parent_link: link_1 child_link: link_0\njoint_name: joint_1 joint_type: fixed parent_link: base child_link: link_1\njoint_name: joint_2 joint_type: prismatic parent_link: link_1 child_link: link_2"
        },
        {
            "comment": "This code specifies a task involving storage furniture with links to the rotation door, heavy furniture body, and slider drawer. The robot needs to actuate the joint connecting to the drawer link to open it and place an item inside. No special spatial relationships are required for this task as the item should initially be outside of the drawer.",
            "location": "\"/media/root/Prima/works/RoboGen/docs/src/gpt_4/prompts/prompt_spatial_relationship.py\":120-155",
            "content": "```\n```StorageFurniture semantics\nlink_0 hinge rotation_door\nlink_1 heavy furniture_body\nlink_2 slider drawer\n```\nLinks:\nlink_2: link_2 is the drawer link from the semantics. The robot needs to open this drawer to place the item inside. \nJoints: \njoint_2: joint_2, from the articulation tree, connects to link_2 (the drawer). Thus, the robot would need to actuate this joint to open the drawer to store the item.\nsubsteps:\n grasp the drawer\n open the drawer\n grasp the item\n put the item into the drawer\n grasp the drawer again\n close the drawer\n release the grasp\nOutput:\nThis task involves putting one item into the drawer of the storage furniture. The item should initially be outside of the drawer, such that the robot can learn to put it into the drawer. Therefore, no special relationships of in or on are needed. Therefore, no special spatial relationships are needed.\n```spatial relationship\nNone\n```\nCan you do it for the following task: \n\"\"\"\n]\nuser_contents_rigid = [\n\"\"\"\nYour goal is to output any special spatial rel"
        },
        {
            "comment": "The code provides a function that takes input parameters including task name, objects involved in the task and substeps for performing the task. It then identifies any required spatial relationships between the objects and outputs these as needed. This is useful for instructing a robot arm how to interact with household objects in specific scenarios.",
            "location": "\"/media/root/Prima/works/RoboGen/docs/src/gpt_4/prompts/prompt_spatial_relationship.py\":155-184",
            "content": "ationships certain objects should have in the initial state, given a task. The task is for a robot arm to learn the corresponding skills in household scenarios.  \nThe input to you will include \nthe task name, \nobjects involved in the task, \nsubsteps for performing the task.\nWe have the following spatial relationships:\non, obj_A, obj_B: object A is on top of object B, e.g., a fork on the table.\nin, obj_A, obj_B: object A is inside object B, e.g., a gold ring in the safe.\nGiven the input to you, you should output any needed spatial relationships of the involved objects. \nHere are some examples:\nInput:\nTask Name:Fetch Item from Refrigerator \nObjects involved: refrigerator, item\nsubsteps:\n grasp the refrigerator door\n open the refrigerator door\n grasp the item\n move the item out of the refrigerator\n grasp the refrigerator door again\n close the refrigerator door\nOutput:\nThe goal is for the robot arm to learn to retrieve an item from the refrigerator. Therefore, the item needs to be initially inside the refrigerator. Therefore we should have a spatial relationship as the following:"
        },
        {
            "comment": "This code defines a function `query_spatial_relationship` that takes in a task name, description, involved objects, articulation tree, semantics, links, joints, and substeps as parameters. The function determines the spatial relationship between the objects in the task based on their positions and orientation, which could be \"in\", \"on\", or \"none\". It then returns this relationship as output for further processing or decision making.",
            "location": "\"/media/root/Prima/works/RoboGen/docs/src/gpt_4/prompts/prompt_spatial_relationship.py\":185-229",
            "content": "```spatial relationship\nIn, item, refrigerator\n```\nAnother example:\nTask Name: Turn Off Faucet\nObjects involved: faucet\nsubsteps:\ngrasp the faucet switch\nturn off the faucet\nOutput:\nThere is only 1 object involved in the task, thus no special spatial relationships are required.\n```spatial relationship\nNone\n```\nOne more example:\nTask Name: Store an item inside the Drawer\nObjects involved: storage furniture, item\nsubsteps:\n grasp the drawer\n open the drawer\n grasp the item\n put the item into the drawer\n grasp the drawer again\n close the drawer\n release the grasp\nOutput:\nThis task involves putting one item into the drawer of the storage furniture. The item should initially be outside of the drawer, such that the robot can learn to put it into the drawer. Therefore, no special relationships of in or on are needed.\n```spatial relationship\nNone\n```\nCan you do it for the following task: \n\"\"\"\n]\nassistant_contents = []\ndef query_spatial_relationship(task_name, task_description, involved_objects, articulation_tree, semantics, links, joints, substeps, save_path=None, "
        },
        {
            "comment": "The code takes a task description, objects involved, articulation tree, semantics, links, and joints as input. It combines this information into a single input string for the AI model (GPT-4) to process. The code then creates a new user content by appending this combined input to an existing user_contents list. Depending on whether the save_path variable is set or not, it determines the file path for saving the response. It sets the system prompt, and queries the AI model (GPT-4) using the new user contents, assistant contents, save_path, temperature, and model parameters to generate a response. The code then parses this response to extract the spatial relationships.",
            "location": "\"/media/root/Prima/works/RoboGen/docs/src/gpt_4/prompts/prompt_spatial_relationship.py\":230-266",
            "content": "                               temperature=0.1, model='gpt-4'):\n    input = \"\"\"\nTask Name: {}\nDescription: {}\nObjects involved: {}\n{}\n{}\nLinks:\n{}\nJoints:\n{}\nsubsteps:\n{}\n\"\"\".format(task_name, task_description, involved_objects, articulation_tree, semantics, links, joints, \"\".join(substeps))\n    new_user_contents = copy.deepcopy(user_contents)\n    new_user_contents[0] = new_user_contents[0] + input\n    if save_path is None:\n        save_path = 'data/debug/{}_joint_angle.json'.format(input_task_name.replace(\" \", \"_\"))\n    system = \"You are a helpful assistant.\"\n    response = query(system, new_user_contents, assistant_contents, save_path=save_path, temperature=temperature, model=model)\n    # TODO: parse the response to get the joint angles\n    response = response.split(\"\\n\")\n    spatial_relationships = []\n    for l_idx, line in enumerate(response):\n        if line.lower().startswith(\"```spatial relationship\"):\n            for l_idx_2 in range(l_idx+1, len(response)):\n                if response[l_idx_2].lower().startswith(\"```\"):"
        },
        {
            "comment": "This code snippet defines a function called `query_spatial_relationship_rigid` that takes a task name, involved objects, substeps, save path, temperature, and model as input. It generates a new input by concatenating the original user contents with a formatted string containing the task name, involved objects, and substeps. The function then sends this input to an AI model (e.g., GPT-4) to generate a response, which is split into lines and used to create a list of spatial relationships.",
            "location": "\"/media/root/Prima/works/RoboGen/docs/src/gpt_4/prompts/prompt_spatial_relationship.py\":267-296",
            "content": "                    break\n                if response[l_idx_2].lower().strip() == \"none\":\n                    continue\n                spatial_relationships.append(response[l_idx_2].strip().lstrip().lower())\n    return spatial_relationships\ndef query_spatial_relationship_rigid(task_name, involved_objects, substeps, save_path=None, temperature=0.1, model='gpt-4'):\n    input = \"\"\"\nTask Name: {}\nObjects involved: {}\nsubsteps:\n{}\n\"\"\".format(task_name, involved_objects, \"\".join(substeps))\n    new_user_contents = copy.deepcopy(user_contents_rigid)\n    new_user_contents[0] = new_user_contents[0] + input\n    if save_path is None:\n        save_path = 'data/debug/{}_joint_angle.json'.format(input_task_name.replace(\" \", \"_\"))\n    system = \"You are a helpful assistant.\"\n    response = query(system, new_user_contents, assistant_contents, save_path=save_path, temperature=temperature, model=model)\n    # TODO: parse the response to get the joint angles\n    response = response.split(\"\\n\")\n    spatial_relationships = []\n    for l_idx, line in enumerate(response):"
        },
        {
            "comment": "This code iterates through a response list, identifies and skips \"none\" lines, and appends all spatial relationship lines (starting with ```spatial relationship) to the spatial_relationships list. It then returns this list of relationships.",
            "location": "\"/media/root/Prima/works/RoboGen/docs/src/gpt_4/prompts/prompt_spatial_relationship.py\":297-305",
            "content": "        if line.lower().startswith(\"```spatial relationship\"):\n            for l_idx_2 in range(l_idx+1, len(response)):\n                if response[l_idx_2].lower().startswith(\"```\"):\n                    break\n                if response[l_idx_2].lower().strip() == \"none\":\n                    continue\n                spatial_relationships.append(response[l_idx_2].strip().lstrip().lower())\n    return spatial_relationships"
        }
    ]
}