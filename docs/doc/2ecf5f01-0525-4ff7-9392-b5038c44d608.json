{
    "summary": "This code calculates joint angles for articulated objects, sets angles for robotic lamps and doors, outlines door, faucet, and drawer interactions, and teaches the robot to adjust positions without relying on specific joint angles using OpenAI's GPT-4 model.",
    "details": [
        {
            "comment": "This code defines a problem-solving task where the goal is to set the joint angles of articulated objects correctly based on provided input. The input includes details about the task, object, and its links and joints, with output being the ideal joint values for each involved joint (as a number in range [0, 1] or \"random\" for sampling). By default, joints are set to their lower limit initially.",
            "location": "\"/media/root/Prima/works/RoboGen/docs/src/gpt_4/prompts/prompt_set_joint_angle.py\":0-11",
            "content": "from gpt_4.query import query\nimport copy\nuser_contents = [\n\"\"\"\nYour goal is to set the  joint angles of some articulated objects to the right value in the initial state, given a task. The task is for a robot arm to learn the corresponding skills to manipulate the articulated object. \nThe input to you will include the task name, a short description of the task, the articulation tree of the articulated object, a semantic file of the articulated object, the links and joints of the articulated objects that will be involved in the task, and the substeps for doing the task. \nYou should output for each joint involved in the task, what joint value it should be set to. You should output a number in the range [0, 1], where 0 corresponds to the lower limit of that joint angle, and 1 corresponds to the upper limit of the joint angle. You can also output a string of \"random\", which indicates to sample the joint angle within the range.\nBy default, the joints in an object are set to their lower joint limit"
        },
        {
            "comment": "This code defines the joints and links of an articulated object, such as a door. The first link is the door itself (link_0), while link_1 is the door frame and link_2 is another part of the door. Joint_0 is the revolute joint connecting link_0 to link_1, which needs to be actuated carefully by the robot to close the door.",
            "location": "\"/media/root/Prima/works/RoboGen/docs/src/gpt_4/prompts/prompt_set_joint_angle.py\":11-42",
            "content": "s. You can assume that the lower joint limit corresponds to the natural state of the articulated object. E.g., for a door's hinge joint, 0 means it is closed, and 1 means it is open. For a lever, 0 means it is unpushed, and 1 means it is pushed to the limit. \nHere are two examples:\nInput:\nTask Name: Close the door\nDescription: The robot arm will close the door after it was opened. \n```door articulation tree\nlinks: \nbase\nlink_0\nlink_1\nlink_2\njoints: \njoint_name: joint_0 joint_type: revolute parent_link: link_1 child_link: link_0\njoint_name: joint_1 joint_type: fixed parent_link: base child_link: link_1\njoint_name: joint_2 joint_type: revolute parent_link: link_0 child_link: link_2\n```\n```door semantics\nlink_0 hinge rotation_door\nlink_1 static door_frame\nlink_2 hinge rotation_door\n```\nLinks: \n- link_0: link_0 is the door. This is the part of the door assembly that the robot needs to interact with.\nJoints:\n- joint_0: Joint_0 is the revolute joint connecting link_0 (the door) as per the articulation tree. The robot needs to actuate this joint cautiously to ensure the door is closed."
        },
        {
            "comment": "The code snippet describes the articulation tree and semantics of a door and faucet for a robotic arm to interact with. It explains that link_0 represents the door, joint_0 is the revolute joint connecting link_0, and the robot needs to actuate this joint carefully to close the door. The substeps involve grasping the faucet switch to turn it off.",
            "location": "\"/media/root/Prima/works/RoboGen/docs/src/gpt_4/prompts/prompt_set_joint_angle.py\":44-81",
            "content": "substeps:\napproach the door\t\nclose the door\nOutput:\nThe goal is for the robot arm to learn to close the door after it is opened. Therefore, the door needs to be initially opened, thus, we are setting its value to 1, which corresponds to the upper joint limit. \n```joint values\njoint_0: 1\n```\nAnother example:\nTask Name: Turn Off Faucet\nDescription: The robotic arm will turn the faucet off by manipulating the switch\n```Faucet articulation tree\nlinks: \nbase\nlink_0\nlink_1\njoints: \njoint_name: joint_0 joint_type: fixed parent_link: base child_link: link_0\njoint_name: joint_1 joint_type: revolute parent_link: link_0 child_link: link_1\n```\n```Faucet semantics\nlink_0 static faucet_base\nlink_1 hinge switch\n```\nLinks: \n- link_0: link_0 is the door. This is the part of the door assembly that the robot needs to interact with.\nJoints:\n- joint_0: Joint_0 is the revolute joint connecting link_0 (the door) as per the articulation tree. The robot needs to actuate this joint cautiously to ensure the door is closed.\nsubsteps:\ngrasp the faucet switch"
        },
        {
            "comment": "The code defines a robot arm with three links and joints. The first link, link_0, has a rotational hinge for the rotation of the door. The second link, link_1, is a heavy furniture body. Lastly, link_2 is the drawer that the robot needs to open in order to place an item inside. Joint_0 and joint_1 are revolute and fixed joints respectively while joint_2 is a prismatic joint.",
            "location": "\"/media/root/Prima/works/RoboGen/docs/src/gpt_4/prompts/prompt_set_joint_angle.py\":82-116",
            "content": "turn off the faucet\nOutput:\nFor the robot to learn to turn off the faucet, it cannot be already off initially. Therefore, joint_1 should be set to its upper joint limit, or any value that is more than half of the joint range, e.g., 0.8.\n```joint value\njoint_1: 0.8\n```\nOne more example:\nTask Name: Store an item inside the Drawer\nDescription: The robot arm picks up an item and places it inside the drawer of the storage furniture\n```StorageFurniture articulation tree\nlinks: \nbase\nlink_0\nlink_1\nlink_2\njoints: \njoint_name: joint_0 joint_type: revolute parent_link: link_1 child_link: link_0\njoint_name: joint_1 joint_type: fixed parent_link: base child_link: link_1\njoint_name: joint_2 joint_type: prismatic parent_link: link_1 child_link: link_2\n```\n```StorageFurniture semantics\nlink_0 hinge rotation_door\nlink_1 heavy furniture_body\nlink_2 slider drawer\n```\nLinks:\n- link_2: link_2 is the drawer link from the semantics. The robot needs to open this drawer to place the item inside. \nJoints: \n- joint_2: joint_2, from the ar"
        },
        {
            "comment": "This code sets the joint angle for the articulated object (lamp) to direct light towards a specific object or area. The lamp has a revolute joint between link_3 and link_0, allowing it to rotate and adjust the direction of the light. No particular joint angle needs to be set as the robot will learn to adjust the position accordingly.",
            "location": "\"/media/root/Prima/works/RoboGen/docs/src/gpt_4/prompts/prompt_set_joint_angle.py\":116-149",
            "content": "ticulation tree, connects to link_2 (the drawer). Thus, the robot would need to actuate this joint to open the drawer to store the item.\nsubsteps:\n grasp the drawer\n open the drawer\n grasp the item\n put the item into the drawer\n grasp the drawer again\n close the drawer\n release the grasp\nOutput:\nThis task involves putting one item into the drawer of the storage furniture. As noted in the substeps, the robot needs to first open the drawer, put the item in, and then close it. Since the articulated object is initialized with the lower joint limit, i.e., the drawer is initially closed, it aligns with the task where the robot needs to first learn to open the drawer. Therefore, no particular joint angle needs to be set, and we just output None. \n```joint value\nNone\n```\nOne more example:\nTask Name: Direct Lamp light\nDescription: The robot positions both the head and rotation bar to direct the light at a specific object or area\n```Lamp articulation tree\nlinks: \nbase\nlink_0\nlink_1\nlink_2\nlink_3\njoints: \njoint_name: joint_0 joint_type: revolute parent_link: link_3 child_link: link_0"
        },
        {
            "comment": "The code defines the links and joints required for a robot to direct a lamp's light towards a specific area. The links include the rotation bar, lamp head, lamp base, and another rotation bar. Joints are used to connect the links and allow the robot to rotate the rotation bars and lamp head to aim the light.",
            "location": "\"/media/root/Prima/works/RoboGen/docs/src/gpt_4/prompts/prompt_set_joint_angle.py\":150-180",
            "content": "joint_name: joint_1 joint_type: revolute parent_link: link_0 child_link: link_1\njoint_name: joint_2 joint_type: fixed parent_link: base child_link: link_2\njoint_name: joint_3 joint_type: revolute parent_link: link_2 child_link: link_3\n```\n```Lamp semantics\nlink_0 hinge rotation_bar\nlink_1 hinge head\nlink_2 free lamp_base\nlink_3 hinge rotation_bar\n```\nLinks:\nlink_0 and link_1: These two links are necessary to direct the lamp light toward a specific area because they represent the rotation bar and lamp head respectively.\nJoints:\njoint_0 and joint_1: These joints connect the rotation bar and the lamp head. By actuating both these joints, the robot can direct the light at a desired location.\nsubsteps:\n grasp the first rotation bar\n rotate the first rotation bar to aim the lamp\n release the first rotation bar\n grasp the lamp head\n rotate the lamp head to aim the lamp\n release the lamp head\nOutput:\nThe task involves directing the lamp light at a specific area. The robot needs to learn to manipulate both the rotat"
        },
        {
            "comment": "This code defines a function, \"query_joint_angle\", which takes task-related information as input and uses it to generate a prompt for OpenAI's GPT-4 model. The prompt includes the task name, description, articulation tree, semantics, links, joints, and substeps. The output is obtained from the model based on the provided input and saved in a file with a specific path if specified; otherwise, it uses a default path.",
            "location": "\"/media/root/Prima/works/RoboGen/docs/src/gpt_4/prompts/prompt_set_joint_angle.py\":180-220",
            "content": "ion bar and the lamp head to achieve this. Therefore, we need to set the initial joint angles such that the lamp is not already directed at the desired area. We can set both joint_0 and joint_1 to be randomly sampled.\n```joint values\njoint_0: random\njoint_1: random\n```\nCan you do it for the following task:\n\"\"\"\n]\nassistant_contents = []\ndef query_joint_angle(task_name, task_description, articulation_tree, semantics, links, joints, substeps, save_path=None, \n                      temperature=0.1, model='gpt-4'):\n    input = \"\"\"\nTask Name: {}\nDescription: {}\n{}\n{}\nLinks:\n{}\nJoints:\n{}\nsubsteps:\n{}\n\"\"\".format(task_name, task_description, articulation_tree, semantics, links, joints, \"\".join(substeps))\n    new_user_contents = copy.deepcopy(user_contents)\n    new_user_contents[0] = new_user_contents[0] + input\n    if save_path is None:\n        save_path = 'data/debug/{}_joint_angle.json'.format(input_task_name.replace(\" \", \"_\"))\n    system = \"You are a helpful assistant.\"\n    response = query(system, new_user_contents, assistant_contents, save_path=save_path, temperature=temperature, model=model)"
        },
        {
            "comment": "This function parses a response to extract joint angles. It searches for \"joint values\" and \"```\" markdown delimiters, ignoring \"none\" lines, then splits each line by \":\". Finally, it returns a dictionary of joint names and their corresponding values.",
            "location": "\"/media/root/Prima/works/RoboGen/docs/src/gpt_4/prompts/prompt_set_joint_angle.py\":222-236",
            "content": "    # TODO: parse the response to get the joint angles\n    response = response.split(\"\\n\")\n    joint_values = {}\n    for l_idx, line in enumerate(response):\n        if line.lower().startswith(\"```joint values\"):\n            for l_idx_2 in range(l_idx+1, len(response)):\n                if response[l_idx_2].lower().startswith(\"```\"):\n                    break\n                if response[l_idx_2].lower().strip() == \"none\":\n                    continue\n                joint_name, joint_value = response[l_idx_2].split(\":\")\n                joint_values[joint_name.strip().lstrip()] = joint_value.strip().lstrip()\n    return joint_values"
        }
    ]
}